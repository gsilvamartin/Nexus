#!/usr/bin/env python3
"""
Teste B√°sico do NEXUS

Testa os componentes b√°sicos do sistema NEXUS para verificar se est√£o funcionando corretamente.
"""

import asyncio
import logging
import sys
from datetime import datetime

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def test_working_memory():
    """Testa a mem√≥ria de trabalho."""
    logger.info("üß† Testando Mem√≥ria de Trabalho...")
    
    try:
        from nexus.cognitive.working_memory import WorkingMemory
        
        # Criar inst√¢ncia
        wm = WorkingMemory({
            'max_items': 10,
            'max_size_bytes': 1024 * 100,  # 100KB
            'default_ttl_seconds': 60
        })
        
        await wm.initialize()
        
        # Teste b√°sico
        await wm.store("test_key", "test_value", priority=5.0)
        value = await wm.retrieve("test_key")
        
        assert value == "test_value", f"Valor esperado 'test_value', obtido '{value}'"
        
        # Teste de contexto
        await wm.update_context({"test_context": "working"})
        context = await wm.get_current_context()
        
        assert "test_context" in context, "Contexto n√£o foi atualizado"
        
        await wm.shutdown()
        logger.info("‚úÖ Mem√≥ria de Trabalho: OK")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Mem√≥ria de Trabalho: FALHOU - {e}")
        return False


async def test_decision_cortex():
    """Testa o c√≥rtex de decis√£o."""
    logger.info("üéØ Testando C√≥rtex de Decis√£o...")
    
    try:
        from nexus.cognitive.decision_cortex_enhanced import EnhancedDecisionCortex
        
        # Criar inst√¢ncia
        dc = EnhancedDecisionCortex({
            'confidence_threshold': 0.7,
            'risk_tolerance': 0.5
        })
        
        await dc.initialize()
        
        # Teste b√°sico
        inputs = {
            'urgency_indicators': ['moderate'],
            'scope': 'operational'
        }
        
        context = {
            'complexity': 0.5,
            'uncertainty': 0.3
        }
        
        result = await dc.process_decisions(inputs, context)
        
        assert 'decisions' in result, "Resultado deve conter 'decisions'"
        assert 'confidence' in result, "Resultado deve conter 'confidence'"
        assert 'reasoning' in result, "Resultado deve conter 'reasoning'"
        
        # Verificar m√©tricas
        metrics = await dc.get_performance_metrics()
        assert 'total_decisions' in metrics, "M√©tricas devem conter 'total_decisions'"
        
        await dc.shutdown()
        logger.info("‚úÖ C√≥rtex de Decis√£o: OK")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå C√≥rtex de Decis√£o: FALHOU - {e}")
        return False


async def test_episodic_memory():
    """Testa a mem√≥ria epis√≥dica."""
    logger.info("üíæ Testando Mem√≥ria Epis√≥dica...")
    
    try:
        from nexus.memory.episodic import EpisodicMemorySystem
        
        # Criar inst√¢ncia
        em = EpisodicMemorySystem({
            'consolidation_threshold': 0.7,
            'similarity_threshold': 0.8
        })
        
        await em.initialize()
        
        # Teste b√°sico
        experience = {
            'task': 'Teste de mem√≥ria epis√≥dica',
            'technologies': ['Python', 'Test'],
            'success_metrics': {'completion_time': 1.0, 'quality_score': 0.9},
            'timestamp': datetime.utcnow(),
            'confidence': 0.8
        }
        
        memory_id = await em.store_experience(experience)
        assert memory_id is not None, "ID da mem√≥ria n√£o deve ser None"
        
        # Teste de busca
        query_context = {
            'current_situation': {
                'task': 'Teste de mem√≥ria',
                'technologies': ['Python']
            },
            'similarity_threshold': 0.7
        }
        
        similar_memories = await em.retrieve_relevant_experiences(query_context)
        assert isinstance(similar_memories, list), "Resultado deve ser uma lista"
        
        await em.shutdown()
        logger.info("‚úÖ Mem√≥ria Epis√≥dica: OK")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Mem√≥ria Epis√≥dica: FALHOU - {e}")
        return False


async def test_causal_reasoning():
    """Testa o racioc√≠nio causal."""
    logger.info("üîó Testando Racioc√≠nio Causal...")
    
    try:
        from nexus.reasoning.causal import CausalReasoningEngine
        
        # Criar inst√¢ncia
        cr = CausalReasoningEngine({
            'causal_graph_size': 100,
            'intervention_timeout': 10.0
        })
        
        await cr.initialize()
        
        # Teste b√°sico
        observations = [
            {'variable': 'test_var1', 'value': 0.5},
            {'variable': 'test_var2', 'value': 0.7}
        ]
        
        interventions = [
            {'variable': 'test_var1', 'value': 0.8}
        ]
        
        analysis = await cr.analyze_system_behavior(observations, interventions)
        
        assert isinstance(analysis, dict), "An√°lise deve ser um dicion√°rio"
        assert 'confidence' in analysis, "An√°lise deve conter 'confidence'"
        
        await cr.shutdown()
        logger.info("‚úÖ Racioc√≠nio Causal: OK")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Racioc√≠nio Causal: FALHOU - {e}")
        return False


async def test_multi_modal_orchestration():
    """Testa a orquestra√ß√£o multi-modal."""
    logger.info("üé≠ Testando Orquestra√ß√£o Multi-Modal...")
    
    try:
        from nexus.orchestration.multi_modal import MultiModalOrchestrator
        
        # Criar inst√¢ncia
        mmo = MultiModalOrchestrator({
            'max_models': 3,
            'ensemble_threshold': 0.8
        })
        
        await mmo.initialize()
        
        # Teste b√°sico
        task = {
            'task_type': 'test_task',
            'description': 'Tarefa de teste',
            'complexity': 0.5
        }
        
        context = {
            'test_context': True
        }
        
        result = await mmo.intelligent_dispatch(task, context)
        
        assert isinstance(result, dict), "Resultado deve ser um dicion√°rio"
        assert 'confidence' in result, "Resultado deve conter 'confidence'"
        
        await mmo.shutdown()
        logger.info("‚úÖ Orquestra√ß√£o Multi-Modal: OK")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Orquestra√ß√£o Multi-Modal: FALHOU - {e}")
        return False


async def test_nexus_core():
    """Testa o n√∫cleo do NEXUS."""
    logger.info("üöÄ Testando NEXUS Core...")
    
    try:
        from nexus.core.nexus_core import NEXUSCore, NEXUSConfig
        
        # Configura√ß√£o m√≠nima
        config = NEXUSConfig(
            environment="test",
            cognitive_config={'max_history_size': 100},
            memory_config={'consolidation_threshold': 0.7},
            reasoning_config={'causal_graph_size': 100},
            orchestration_config={'max_models': 3}
        )
        
        # Criar inst√¢ncia
        nexus = NEXUSCore(config)
        await nexus.initialize()
        
        # Teste b√°sico
        request = {
            'type': 'test_request',
            'content': 'Teste do NEXUS Core',
            'timestamp': datetime.utcnow().isoformat()
        }
        
        response = await nexus.process_request(request)
        
        assert isinstance(response, dict), "Resposta deve ser um dicion√°rio"
        assert 'status' in response, "Resposta deve conter 'status'"
        
        # Verificar status do sistema
        status = await nexus.get_system_status()
        assert 'status' in status, "Status deve conter 'status'"
        assert 'health_score' in status, "Status deve conter 'health_score'"
        
        await nexus.shutdown()
        logger.info("‚úÖ NEXUS Core: OK")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå NEXUS Core: FALHOU - {e}")
        return False


async def run_all_tests():
    """Executa todos os testes."""
    
    print("üß™ NEXUS - Teste B√°sico dos Componentes")
    print("="*50)
    
    tests = [
        ("Mem√≥ria de Trabalho", test_working_memory),
        ("C√≥rtex de Decis√£o", test_decision_cortex),
        ("Mem√≥ria Epis√≥dica", test_episodic_memory),
        ("Racioc√≠nio Causal", test_causal_reasoning),
        ("Orquestra√ß√£o Multi-Modal", test_multi_modal_orchestration),
        ("NEXUS Core", test_nexus_core)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüîç Executando: {test_name}")
        try:
            success = await test_func()
            results.append((test_name, success))
        except Exception as e:
            logger.error(f"‚ùå Erro inesperado em {test_name}: {e}")
            results.append((test_name, False))
    
    # Relat√≥rio final
    print("\n" + "="*50)
    print("üìä RELAT√ìRIO FINAL DOS TESTES")
    print("="*50)
    
    total_tests = len(results)
    passed_tests = sum(1 for _, success in results if success)
    failed_tests = total_tests - passed_tests
    
    for test_name, success in results:
        status = "‚úÖ PASSOU" if success else "‚ùå FALHOU"
        print(f"{status} - {test_name}")
    
    print(f"\nüìà Total: {total_tests}")
    print(f"‚úÖ Passou: {passed_tests}")
    print(f"‚ùå Falhou: {failed_tests}")
    print(f"üìä Taxa de sucesso: {(passed_tests/total_tests)*100:.1f}%")
    
    if failed_tests == 0:
        print("\nüéâ Todos os testes passaram! O sistema NEXUS est√° funcionando corretamente.")
        return True
    else:
        print(f"\n‚ö†Ô∏è {failed_tests} teste(s) falharam. Verifique os logs para mais detalhes.")
        return False


async def main():
    """Fun√ß√£o principal."""
    
    try:
        success = await run_all_tests()
        sys.exit(0 if success else 1)
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Testes interrompidos pelo usu√°rio.")
        sys.exit(1)
        
    except Exception as e:
        logger.error(f"‚ùå Erro inesperado: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
