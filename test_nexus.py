#!/usr/bin/env python3
"""
NEXUS Test Script

Script simples para testar a funcionalidade b√°sica do NEXUS.
"""

import asyncio
import sys
from pathlib import Path

# Adicionar o diret√≥rio do projeto ao Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))


async def test_nexus_imports():
    """Testa se todos os imports do NEXUS funcionam."""
    
    print("üîç Testando imports do NEXUS...")
    
    try:
        # Testar imports principais
        from nexus.core import NEXUS, DevelopmentObjective
        print("‚úÖ Core imports OK")
        
        from nexus.cognitive import ExecutiveFunction, CognitiveSubstrate
        print("‚úÖ Cognitive imports OK")
        
        from nexus.cortices import SpecificationCortex, ArchitectureCortex
        print("‚úÖ Cortices imports OK")
        
        from nexus.memory import EpisodicMemorySystem
        print("‚úÖ Memory imports OK")
        
        from nexus.reasoning import CausalReasoningEngine
        print("‚úÖ Reasoning imports OK")
        
        from nexus.orchestration import MultiModalOrchestrator
        print("‚úÖ Orchestration imports OK")
        
        print("\n‚úÖ Todos os imports funcionaram corretamente!")
        return True
        
    except ImportError as e:
        print(f"\n‚ùå Erro de import: {e}")
        return False


async def test_nexus_basic_functionality():
    """Testa funcionalidade b√°sica do NEXUS."""
    
    print("\nüß™ Testando funcionalidade b√°sica...")
    
    try:
        from nexus.core import NEXUS, DevelopmentObjective
        
        # Configura√ß√£o m√≠nima
        config = {
            'cognitive': {'max_working_memory_items': 100},
            'orchestration': {'max_concurrent_requests': 1}
        }
        
        # Criar sistema NEXUS
        nexus = NEXUS(config)
        print("‚úÖ Sistema NEXUS criado")
        
        # Criar objetivo simples
        objective = DevelopmentObjective(
            description="Teste simples do sistema",
            requirements=["Requisito 1", "Requisito 2"]
        )
        print("‚úÖ Objetivo de desenvolvimento criado")
        
        # Testar desenvolvimento (simulado)
        print("üöÄ Executando desenvolvimento aut√¥nomo...")
        result = await nexus.autonomous_development(objective)
        
        if result.success:
            print("‚úÖ Desenvolvimento aut√¥nomo executado com sucesso!")
            print(f"   - Tempo de execu√ß√£o: {result.execution_time:.2f}s")
            print(f"   - Arquivos gerados: {len(result.files)}")
        else:
            print("‚ö†Ô∏è  Desenvolvimento completou com avisos")
            for error in result.errors:
                print(f"   - {error}")
        
        # Desligar sistema
        await nexus.shutdown()
        print("‚úÖ Sistema NEXUS desligado corretamente")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erro durante teste: {e}")
        return False


async def test_cli_functionality():
    """Testa funcionalidade do CLI."""
    
    print("\nüñ•Ô∏è  Testando CLI...")
    
    try:
        from nexus.cli.commands import NexusCommands
        
        # Criar comandos CLI
        commands = NexusCommands()
        await commands.initialize()
        print("‚úÖ CLI inicializado")
        
        # Testar status do sistema
        status = await commands.get_system_status()
        print(f"‚úÖ Status obtido: {status['active']}")
        
        # Desligar
        await commands.shutdown()
        print("‚úÖ CLI desligado")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erro no teste CLI: {e}")
        return False


async def main():
    """Fun√ß√£o principal de teste."""
    
    print("üß™ NEXUS - Testes de Funcionalidade B√°sica")
    print("=" * 50)
    
    # Executar testes
    tests = [
        ("Imports", test_nexus_imports),
        ("Funcionalidade B√°sica", test_nexus_basic_functionality),
        ("CLI", test_cli_functionality)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã Executando teste: {test_name}")
        print("-" * 30)
        
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Teste {test_name} falhou: {e}")
            results.append((test_name, False))
    
    # Resumo dos resultados
    print("\n" + "=" * 50)
    print("üìä RESUMO DOS TESTES")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nResultado: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ Todos os testes passaram! NEXUS est√° funcionando corretamente.")
    else:
        print("‚ö†Ô∏è  Alguns testes falharam. Verifique as depend√™ncias e configura√ß√£o.")
    
    return passed == total


if __name__ == "__main__":
    # Configurar logging m√≠nimo
    import logging
    logging.basicConfig(level=logging.ERROR)  # Apenas erros
    
    # Executar testes
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
