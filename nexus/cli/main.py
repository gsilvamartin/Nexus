"""
NEXUS CLI Main Interface

Interface principal de linha de comando para o sistema NEXUS.
"""

import asyncio
import logging
import sys
from typing import Optional
from pathlib import Path

import typer
from rich.console import Console
from rich.logging import RichHandler
from rich.panel import Panel
from rich.text import Text

from nexus.cli.commands import NexusCommands
from nexus.cli.demo import DemoRunner

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format="%(message)s",
    datefmt="[%X]",
    handlers=[RichHandler(rich_tracebacks=True)]
)

logger = logging.getLogger(__name__)
console = Console()

# Criar aplica√ß√£o Typer
app = typer.Typer(
    name="nexus",
    help="NEXUS - Sistema de Desenvolvimento Aut√¥nomo de Pr√≥xima Gera√ß√£o",
    rich_markup_mode="rich"
)

# Inst√¢ncia global dos comandos
nexus_commands: Optional[NexusCommands] = None


def print_banner():
    """Exibe banner do NEXUS."""
    
    banner_text = """
    ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
    ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ïö‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù   ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë
    ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
    ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    
    subtitle = "Sistema de Desenvolvimento Aut√¥nomo de Pr√≥xima Gera√ß√£o"
    version = "v0.1.0 - Arquitetura Neurom√≥rfica Distribu√≠da"
    
    banner_panel = Panel(
        Text(banner_text, style="bold blue") + "\n" +
        Text(subtitle, style="italic cyan", justify="center") + "\n" +
        Text(version, style="dim white", justify="center"),
        border_style="blue",
        padding=(1, 2)
    )
    
    console.print(banner_panel)


@app.command()
def develop(
    description: str = typer.Argument(..., help="Descri√ß√£o do projeto a ser desenvolvido"),
    requirements: Optional[str] = typer.Option(None, "--requirements", "-r", help="Arquivo de requisitos"),
    output_dir: Optional[str] = typer.Option("./nexus_output", "--output", "-o", help="Diret√≥rio de sa√≠da"),
    complexity: Optional[str] = typer.Option("moderate", "--complexity", "-c", help="N√≠vel de complexidade"),
    verbose: bool = typer.Option(False, "--verbose", "-v", help="Modo verboso")
):
    """
    Executa desenvolvimento aut√¥nomo de software.
    
    Exemplo:
        nexus develop "Criar um sistema de e-commerce com React e Node.js"
    """
    if verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    console.print(f"\nüöÄ [bold green]Iniciando desenvolvimento aut√¥nomo...[/bold green]")
    console.print(f"üìù Descri√ß√£o: {description}")
    console.print(f"üìÅ Diret√≥rio de sa√≠da: {output_dir}")
    console.print(f"‚ö° Complexidade: {complexity}")
    
    # Executar desenvolvimento
    result = asyncio.run(_run_autonomous_development(description, requirements, output_dir, complexity))
    
    if result['success']:
        console.print(f"\n‚úÖ [bold green]Desenvolvimento conclu√≠do com sucesso![/bold green]")
        console.print(f"üìä Arquivos gerados: {result['files_count']}")
        console.print(f"üß™ Cobertura de testes: {result['test_coverage']:.1f}%")
        console.print(f"‚è±Ô∏è  Tempo de execu√ß√£o: {result['execution_time']:.1f}s")
    else:
        console.print(f"\n‚ùå [bold red]Desenvolvimento falhou:[/bold red] {result['error']}")


@app.command()
def analyze(
    project_path: str = typer.Argument(..., help="Caminho do projeto para an√°lise"),
    analysis_type: str = typer.Option("complete", "--type", "-t", help="Tipo de an√°lise"),
    output_format: str = typer.Option("console", "--format", "-f", help="Formato de sa√≠da")
):
    """
    Executa an√°lise de projeto existente.
    
    Exemplo:
        nexus analyze ./my_project --type security --format json
    """
    console.print(f"\nüîç [bold blue]Analisando projeto...[/bold blue]")
    console.print(f"üìÅ Projeto: {project_path}")
    console.print(f"üî¨ Tipo de an√°lise: {analysis_type}")
    
    # Executar an√°lise
    result = asyncio.run(_run_project_analysis(project_path, analysis_type, output_format))
    
    if result['success']:
        console.print(f"\n‚úÖ [bold green]An√°lise conclu√≠da![/bold green]")
        console.print(f"üìä Score de qualidade: {result['quality_score']:.1f}/10")
        console.print(f"üîí Score de seguran√ßa: {result['security_score']:.1f}/10")
        console.print(f"‚ö° Score de performance: {result['performance_score']:.1f}/10")
    else:
        console.print(f"\n‚ùå [bold red]An√°lise falhou:[/bold red] {result['error']}")


@app.command()
def demo(
    scenario: str = typer.Option("full", "--scenario", "-s", help="Cen√°rio de demonstra√ß√£o"),
    interactive: bool = typer.Option(True, "--interactive", "-i", help="Modo interativo")
):
    """
    Executa demonstra√ß√£o das capacidades do NEXUS.
    
    Cen√°rios dispon√≠veis:
    - full: Demonstra√ß√£o completa
    - cognitive: Substrato cognitivo
    - cortices: C√≥rtices especializados
    - memory: Sistema de mem√≥ria epis√≥dica
    - reasoning: Motor de racioc√≠nio causal
    """
    console.print(f"\nüé≠ [bold magenta]Executando demonstra√ß√£o NEXUS...[/bold magenta]")
    console.print(f"üé¨ Cen√°rio: {scenario}")
    
    # Executar demonstra√ß√£o
    asyncio.run(_run_demo(scenario, interactive))


@app.command()
def status():
    """Exibe status do sistema NEXUS."""
    
    console.print(f"\nüìä [bold cyan]Status do Sistema NEXUS[/bold cyan]")
    
    # Obter status
    status_info = asyncio.run(_get_system_status())
    
    # Exibir informa√ß√µes
    console.print(f"üü¢ Sistema: {'Ativo' if status_info['active'] else 'Inativo'}")
    console.print(f"üß† C√≥rtices: {status_info['cortices_active']}/4 ativos")
    console.print(f"üíæ Mem√≥ria epis√≥dica: {status_info['memory_usage']:.1f}% utilizada")
    console.print(f"ü§ñ Modelos dispon√≠veis: {status_info['models_available']}")
    console.print(f"‚ö° Performance m√©dia: {status_info['avg_performance']:.1f}ms")


@app.command()
def config(
    show: bool = typer.Option(False, "--show", help="Mostrar configura√ß√£o atual"),
    set_key: Optional[str] = typer.Option(None, "--set", help="Definir chave de configura√ß√£o"),
    value: Optional[str] = typer.Option(None, "--value", help="Valor da configura√ß√£o")
):
    """Gerencia configura√ß√£o do NEXUS."""
    
    if show:
        console.print(f"\n‚öôÔ∏è  [bold yellow]Configura√ß√£o NEXUS[/bold yellow]")
        config_info = asyncio.run(_get_configuration())
        
        for section, settings in config_info.items():
            console.print(f"\n[bold]{section}:[/bold]")
            for key, value in settings.items():
                console.print(f"  {key}: {value}")
    
    elif set_key and value:
        console.print(f"\n‚öôÔ∏è  Definindo {set_key} = {value}")
        asyncio.run(_set_configuration(set_key, value))
        console.print("‚úÖ Configura√ß√£o atualizada!")
    
    else:
        console.print("Use --show para ver configura√ß√£o ou --set/--value para definir")


@app.command()
def version():
    """Exibe informa√ß√µes de vers√£o."""
    
    console.print(f"\nüìã [bold]NEXUS - Sistema de Desenvolvimento Aut√¥nomo[/bold]")
    console.print(f"Vers√£o: 0.1.0")
    console.print(f"Arquitetura: Neurom√≥rfica Distribu√≠da")
    console.print(f"Python: {sys.version}")
    console.print(f"Plataforma: {sys.platform}")


async def _run_autonomous_development(
    description: str, 
    requirements: Optional[str], 
    output_dir: str, 
    complexity: str
) -> dict:
    """Executa desenvolvimento aut√¥nomo."""
    
    try:
        # Inicializar NEXUS se necess√°rio
        global nexus_commands
        if nexus_commands is None:
            nexus_commands = NexusCommands()
            await nexus_commands.initialize()
        
        # Executar desenvolvimento
        result = await nexus_commands.autonomous_development(
            description=description,
            requirements_file=requirements,
            output_directory=output_dir,
            complexity_level=complexity
        )
        
        return result
        
    except Exception as e:
        logger.error(f"Erro no desenvolvimento aut√¥nomo: {e}", exc_info=True)
        return {'success': False, 'error': str(e)}


async def _run_project_analysis(project_path: str, analysis_type: str, output_format: str) -> dict:
    """Executa an√°lise de projeto."""
    
    try:
        # Inicializar NEXUS se necess√°rio
        global nexus_commands
        if nexus_commands is None:
            nexus_commands = NexusCommands()
            await nexus_commands.initialize()
        
        # Executar an√°lise
        result = await nexus_commands.analyze_project(
            project_path=project_path,
            analysis_type=analysis_type,
            output_format=output_format
        )
        
        return result
        
    except Exception as e:
        logger.error(f"Erro na an√°lise: {e}", exc_info=True)
        return {'success': False, 'error': str(e)}


async def _run_demo(scenario: str, interactive: bool):
    """Executa demonstra√ß√£o."""
    
    try:
        demo_runner = DemoRunner()
        await demo_runner.run_demo(scenario, interactive)
        
    except Exception as e:
        logger.error(f"Erro na demonstra√ß√£o: {e}", exc_info=True)
        console.print(f"\n‚ùå [bold red]Erro na demonstra√ß√£o:[/bold red] {e}")


async def _get_system_status() -> dict:
    """Obt√©m status do sistema."""
    
    try:
        # Inicializar NEXUS se necess√°rio
        global nexus_commands
        if nexus_commands is None:
            nexus_commands = NexusCommands()
            await nexus_commands.initialize()
        
        return await nexus_commands.get_system_status()
        
    except Exception as e:
        logger.error(f"Erro ao obter status: {e}", exc_info=True)
        return {
            'active': False,
            'cortices_active': 0,
            'memory_usage': 0.0,
            'models_available': 0,
            'avg_performance': 0.0
        }


async def _get_configuration() -> dict:
    """Obt√©m configura√ß√£o atual."""
    
    return {
        'cognitive': {
            'max_working_memory': '100MB',
            'consolidation_threshold': 100,
            'attention_span': '300s'
        },
        'models': {
            'default_provider': 'openai',
            'max_concurrent': 10,
            'timeout': '30s'
        },
        'execution': {
            'max_parallel_tasks': 5,
            'output_directory': './nexus_output',
            'enable_caching': True
        }
    }


async def _set_configuration(key: str, value: str):
    """Define configura√ß√£o."""
    
    # Implementa√ß√£o simplificada
    logger.info(f"Configura√ß√£o {key} definida para {value}")


def main():
    """Fun√ß√£o principal do CLI."""
    
    # Exibir banner se n√£o h√° argumentos
    if len(sys.argv) == 1:
        print_banner()
        console.print("\nüí° Use [bold]nexus --help[/bold] para ver comandos dispon√≠veis")
        console.print("üé≠ Use [bold]nexus demo[/bold] para ver demonstra√ß√£o")
        console.print("üöÄ Use [bold]nexus develop \"descri√ß√£o do projeto\"[/bold] para come√ßar")
        return
    
    # Executar aplica√ß√£o Typer
    try:
        app()
    except KeyboardInterrupt:
        console.print("\n\nüëã [yellow]Opera√ß√£o cancelada pelo usu√°rio[/yellow]")
    except Exception as e:
        console.print(f"\n‚ùå [bold red]Erro inesperado:[/bold red] {e}")
        logger.error(f"Erro inesperado: {e}", exc_info=True)
    finally:
        # Cleanup se necess√°rio
        if nexus_commands:
            try:
                asyncio.run(nexus_commands.shutdown())
            except:
                pass


if __name__ == "__main__":
    main()
