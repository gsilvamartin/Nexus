"""
NEXUS Demo Runner

Executa demonstra√ß√µes interativas das capacidades do NEXUS.
"""

import asyncio
import logging
from typing import Dict, Any
from datetime import datetime

from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TimeElapsedColumn
from rich.table import Table
from rich.text import Text
from rich.live import Live
from rich.layout import Layout

from nexus.core import NEXUS, DevelopmentObjective

logger = logging.getLogger(__name__)
console = Console()


class DemoRunner:
    """Executor de demonstra√ß√µes NEXUS."""
    
    def __init__(self):
        """Inicializa o executor de demo."""
        self.nexus_system: NEXUS = None
    
    async def run_demo(self, scenario: str, interactive: bool = True):
        """Executa demonstra√ß√£o baseada no cen√°rio."""
        
        console.print(f"\nüé¨ [bold magenta]Demonstra√ß√£o NEXUS - {scenario.upper()}[/bold magenta]")
        
        if scenario == "full":
            await self._demo_full_system(interactive)
        elif scenario == "cognitive":
            await self._demo_cognitive_substrate(interactive)
        elif scenario == "cortices":
            await self._demo_specialized_cortices(interactive)
        elif scenario == "memory":
            await self._demo_episodic_memory(interactive)
        elif scenario == "reasoning":
            await self._demo_causal_reasoning(interactive)
        else:
            console.print(f"‚ùå Cen√°rio desconhecido: {scenario}")
    
    async def _demo_full_system(self, interactive: bool):
        """Demonstra√ß√£o completa do sistema."""
        
        console.print("\nüöÄ [bold]Demonstra√ß√£o Completa do Sistema NEXUS[/bold]")
        console.print("Esta demonstra√ß√£o mostra todas as capacidades integradas do NEXUS.\n")
        
        if interactive:
            input("Pressione Enter para continuar...")
        
        # Inicializar sistema
        await self._initialize_system_with_progress()
        
        # Demonstrar desenvolvimento aut√¥nomo
        await self._demo_autonomous_development()
        
        # Demonstrar an√°lise e otimiza√ß√£o
        await self._demo_analysis_and_optimization()
        
        # Demonstrar aprendizado e adapta√ß√£o
        await self._demo_learning_and_adaptation()
        
        # Mostrar m√©tricas finais
        await self._show_final_metrics()
        
        console.print("\n‚ú® [bold green]Demonstra√ß√£o completa finalizada![/bold green]")
    
    async def _demo_cognitive_substrate(self, interactive: bool):
        """Demonstra√ß√£o do substrato cognitivo."""
        
        console.print("\nüß† [bold]Demonstra√ß√£o do Substrato Cognitivo[/bold]")
        console.print("Mostra fun√ß√£o executiva, mem√≥ria de trabalho e controle de aten√ß√£o.\n")
        
        # Simular atividade cognitiva
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TimeElapsedColumn(),
        ) as progress:
            
            # Fun√ß√£o Executiva
            task1 = progress.add_task("Inicializando Fun√ß√£o Executiva...", total=100)
            for i in range(100):
                await asyncio.sleep(0.02)
                progress.update(task1, advance=1)
            
            # Mem√≥ria de Trabalho
            task2 = progress.add_task("Carregando Mem√≥ria de Trabalho...", total=100)
            for i in range(100):
                await asyncio.sleep(0.015)
                progress.update(task2, advance=1)
            
            # Controle de Aten√ß√£o
            task3 = progress.add_task("Configurando Controle de Aten√ß√£o...", total=100)
            for i in range(100):
                await asyncio.sleep(0.01)
                progress.update(task3, advance=1)
        
        # Mostrar estado cognitivo
        await self._show_cognitive_state()
    
    async def _demo_specialized_cortices(self, interactive: bool):
        """Demonstra√ß√£o dos c√≥rtices especializados."""
        
        console.print("\nüéØ [bold]Demonstra√ß√£o dos C√≥rtices Especializados[/bold]")
        console.print("Mostra especifica√ß√£o, arquitetura, implementa√ß√£o e verifica√ß√£o.\n")
        
        cortices = [
            ("C√≥rtex de Especifica√ß√£o", "Analisando requisitos e modelando dom√≠nio"),
            ("C√≥rtex de Arquitetura", "Sintetizando padr√µes e otimizando sistema"),
            ("C√≥rtex de Implementa√ß√£o", "Gerando c√≥digo e resolvendo depend√™ncias"),
            ("C√≥rtex de Verifica√ß√£o", "Verificando propriedades e analisando seguran√ßa")
        ]
        
        for cortex_name, description in cortices:
            console.print(f"\nüîÑ [bold cyan]{cortex_name}[/bold cyan]")
            console.print(f"   {description}")
            
            with Progress(SpinnerColumn(), TextColumn("{task.description}")) as progress:
                task = progress.add_task(f"Executando {cortex_name}...", total=None)
                await asyncio.sleep(1.5)
            
            console.print(f"   ‚úÖ {cortex_name} conclu√≠do")
        
        console.print(f"\nüéâ Todos os c√≥rtices executados com sucesso!")
    
    async def _demo_episodic_memory(self, interactive: bool):
        """Demonstra√ß√£o do sistema de mem√≥ria epis√≥dica."""
        
        console.print("\nüíæ [bold]Demonstra√ß√£o da Mem√≥ria Epis√≥dica[/bold]")
        console.print("Mostra armazenamento, consolida√ß√£o e recupera√ß√£o de experi√™ncias.\n")
        
        # Simular armazenamento de experi√™ncias
        experiences = [
            "Desenvolvimento de API REST bem-sucedido",
            "Otimiza√ß√£o de performance de banco de dados",
            "Implementa√ß√£o de autentica√ß√£o JWT",
            "Resolu√ß√£o de vulnerabilidade de seguran√ßa",
            "Refatora√ß√£o de c√≥digo legado"
        ]
        
        console.print("üìù [bold]Armazenando experi√™ncias:[/bold]")
        for i, exp in enumerate(experiences, 1):
            console.print(f"   {i}. {exp}")
            await asyncio.sleep(0.5)
        
        console.print("\nüîÑ Consolidando mem√≥rias...")
        await asyncio.sleep(2)
        
        console.print("\nüîç [bold]Recuperando experi√™ncias relevantes:[/bold]")
        relevant_experiences = [
            ("API REST", 0.95, "Alta similaridade com projeto atual"),
            ("Autentica√ß√£o JWT", 0.87, "Padr√£o de seguran√ßa aplic√°vel"),
            ("Performance DB", 0.73, "Otimiza√ß√£o relacionada")
        ]
        
        for exp, similarity, reason in relevant_experiences:
            console.print(f"   ‚Ä¢ {exp} (similaridade: {similarity:.2f}) - {reason}")
            await asyncio.sleep(0.3)
    
    async def _demo_causal_reasoning(self, interactive: bool):
        """Demonstra√ß√£o do motor de racioc√≠nio causal."""
        
        console.print("\nüîó [bold]Demonstra√ß√£o do Racioc√≠nio Causal[/bold]")
        console.print("Mostra an√°lise causal, contrafactuais e interven√ß√µes.\n")
        
        # Simular an√°lise causal
        console.print("üîç Analisando rela√ß√µes causais no sistema...")
        await asyncio.sleep(1.5)
        
        # Mostrar grafo causal
        causal_relations = [
            ("Carga do Sistema", "Tempo de Resposta", 0.85),
            ("Tempo de Resposta", "Satisfa√ß√£o do Usu√°rio", 0.78),
            ("Qualidade do C√≥digo", "Manutenibilidade", 0.92),
            ("Cobertura de Testes", "Confiabilidade", 0.88)
        ]
        
        console.print("\nüìä [bold]Rela√ß√µes Causais Identificadas:[/bold]")
        for cause, effect, strength in causal_relations:
            console.print(f"   {cause} ‚Üí {effect} (for√ßa: {strength:.2f})")
        
        # Simular an√°lise contrafactual
        console.print("\nü§î [bold]An√°lise Contrafactual:[/bold]")
        console.print("   'E se a carga do sistema fosse reduzida em 30%?'")
        await asyncio.sleep(1)
        console.print("   ‚Üí Tempo de resposta melhoraria em ~25%")
        console.print("   ‚Üí Satisfa√ß√£o do usu√°rio aumentaria em ~20%")
        
        # Recomenda√ß√µes de interven√ß√£o
        console.print("\nüí° [bold]Recomenda√ß√µes de Interven√ß√£o:[/bold]")
        console.print("   1. Otimizar algoritmos de processamento")
        console.print("   2. Implementar cache inteligente")
        console.print("   3. Escalar recursos computacionais")
    
    async def _initialize_system_with_progress(self):
        """Inicializa sistema com barra de progresso."""
        
        console.print("üîß Inicializando Sistema NEXUS...")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
        ) as progress:
            
            # Inicializa√ß√£o dos componentes
            components = [
                ("Substrato Cognitivo", 25),
                ("C√≥rtices Especializados", 30),
                ("Sistema de Mem√≥ria", 20),
                ("Motor de Racioc√≠nio", 15),
                ("Orquestra√ß√£o Multi-Modal", 10)
            ]
            
            total_task = progress.add_task("Inicializando NEXUS...", total=100)
            
            for component, weight in components:
                component_task = progress.add_task(f"Carregando {component}...", total=weight)
                
                for i in range(weight):
                    await asyncio.sleep(0.05)
                    progress.update(component_task, advance=1)
                    progress.update(total_task, advance=1)
        
        # Inicializar sistema real
        config = {
            'cognitive': {'max_working_memory_items': 500},
            'orchestration': {'max_concurrent_requests': 3}
        }
        
        self.nexus_system = NEXUS(config)
        
        console.print("‚úÖ Sistema NEXUS inicializado com sucesso!")
    
    async def _demo_autonomous_development(self):
        """Demonstra desenvolvimento aut√¥nomo."""
        
        console.print(f"\nüöÄ [bold]Desenvolvimento Aut√¥nomo em A√ß√£o[/bold]")
        
        # Simular desenvolvimento de um projeto
        objective = DevelopmentObjective(
            description="Criar API de gerenciamento de tarefas com autentica√ß√£o JWT",
            requirements=[
                "API REST com CRUD de tarefas",
                "Autentica√ß√£o JWT",
                "Valida√ß√£o de dados",
                "Testes automatizados",
                "Documenta√ß√£o OpenAPI"
            ]
        )
        
        console.print(f"üìã Objetivo: {objective.description}")
        console.print(f"üìù Requisitos: {len(objective.requirements)} itens")
        
        # Simular fases do desenvolvimento
        phases = [
            ("An√°lise de Requisitos", "Especifica√ß√£o", 15),
            ("Design Arquitetural", "Arquitetura", 20),
            ("Gera√ß√£o de C√≥digo", "Implementa√ß√£o", 35),
            ("Testes e Valida√ß√£o", "Verifica√ß√£o", 20),
            ("Documenta√ß√£o", "Finaliza√ß√£o", 10)
        ]
        
        with Progress(
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
            TimeElapsedColumn(),
        ) as progress:
            
            for phase_name, cortex, duration in phases:
                task = progress.add_task(f"{phase_name} ({cortex})", total=duration)
                
                for i in range(duration):
                    await asyncio.sleep(0.1)
                    progress.update(task, advance=1)
        
        # Mostrar resultado
        console.print(f"\n‚úÖ [bold green]Desenvolvimento Conclu√≠do![/bold green]")
        console.print(f"üìÅ Arquivos gerados: 12")
        console.print(f"üß™ Cobertura de testes: 94%")
        console.print(f"üìä Score de qualidade: 9.2/10")
        console.print(f"‚è±Ô∏è  Tempo total: 3.2 minutos")
    
    async def _demo_analysis_and_optimization(self):
        """Demonstra an√°lise e otimiza√ß√£o."""
        
        console.print(f"\nüîç [bold]An√°lise e Otimiza√ß√£o Cont√≠nua[/bold]")
        
        # Simular an√°lise de c√≥digo
        console.print("üî¨ Executando an√°lise est√°tica...")
        await asyncio.sleep(1)
        
        console.print("üõ°Ô∏è  Executando an√°lise de seguran√ßa...")
        await asyncio.sleep(1.2)
        
        console.print("‚ö° Executando an√°lise de performance...")
        await asyncio.sleep(0.8)
        
        # Mostrar resultados da an√°lise
        analysis_table = Table(title="Resultados da An√°lise")
        analysis_table.add_column("Categoria", style="cyan")
        analysis_table.add_column("Score", style="green")
        analysis_table.add_column("Status", style="yellow")
        
        analysis_table.add_row("Qualidade de C√≥digo", "9.2/10", "‚úÖ Excelente")
        analysis_table.add_row("Seguran√ßa", "8.7/10", "‚úÖ Muito Bom")
        analysis_table.add_row("Performance", "8.9/10", "‚úÖ Excelente")
        analysis_table.add_row("Manutenibilidade", "9.0/10", "‚úÖ Excelente")
        
        console.print(analysis_table)
        
        # Mostrar otimiza√ß√µes sugeridas
        console.print(f"\nüí° [bold]Otimiza√ß√µes Sugeridas:[/bold]")
        optimizations = [
            "Implementar cache Redis para consultas frequentes",
            "Adicionar √≠ndices de banco de dados para queries lentas",
            "Otimizar serializa√ß√£o JSON com compress√£o",
            "Implementar rate limiting para prote√ß√£o de API"
        ]
        
        for i, opt in enumerate(optimizations, 1):
            console.print(f"   {i}. {opt}")
    
    async def _demo_learning_and_adaptation(self):
        """Demonstra aprendizado e adapta√ß√£o."""
        
        console.print(f"\nüß† [bold]Aprendizado e Adapta√ß√£o Cont√≠nua[/bold]")
        
        # Simular aprendizado de padr√µes
        console.print("üìö Analisando padr√µes de desenvolvimento...")
        await asyncio.sleep(1.5)
        
        patterns_found = [
            "Padr√£o de autentica√ß√£o JWT recorrente",
            "Estrutura de API REST consistente",
            "Padr√£o de valida√ß√£o de dados comum",
            "Estrat√©gia de testes bem-sucedida"
        ]
        
        console.print(f"\nüîç [bold]Padr√µes Identificados:[/bold]")
        for pattern in patterns_found:
            console.print(f"   ‚Ä¢ {pattern}")
        
        # Simular adapta√ß√£o
        console.print(f"\nüîÑ Adaptando estrat√©gias baseado no aprendizado...")
        await asyncio.sleep(1)
        
        adaptations = [
            "Priorizar padr√µes JWT em projetos de autentica√ß√£o",
            "Aplicar estrutura REST consistente automaticamente",
            "Usar valida√ß√£o Pydantic como padr√£o",
            "Implementar testes pytest por default"
        ]
        
        console.print(f"\n‚öôÔ∏è  [bold]Adapta√ß√µes Implementadas:[/bold]")
        for adaptation in adaptations:
            console.print(f"   ‚úì {adaptation}")
    
    async def _show_cognitive_state(self):
        """Mostra estado cognitivo atual."""
        
        # Criar layout para estado cognitivo
        layout = Layout()
        
        layout.split_column(
            Layout(name="header", size=3),
            Layout(name="body")
        )
        
        layout["body"].split_row(
            Layout(name="left"),
            Layout(name="right")
        )
        
        # Header
        header_text = Text("Estado Cognitivo Atual", style="bold magenta", justify="center")
        layout["header"].update(Panel(header_text))
        
        # Estado da mem√≥ria de trabalho
        memory_table = Table(title="Mem√≥ria de Trabalho")
        memory_table.add_column("Item", style="cyan")
        memory_table.add_column("Prioridade", style="yellow")
        memory_table.add_column("Acesso", style="green")
        
        memory_table.add_row("Contexto do Projeto", "Alta", "Ativo")
        memory_table.add_row("Padr√µes Arquiteturais", "M√©dia", "Cache")
        memory_table.add_row("Requisitos Funcionais", "Alta", "Ativo")
        memory_table.add_row("Hist√≥rico de Decis√µes", "Baixa", "Passivo")
        
        layout["left"].update(Panel(memory_table))
        
        # Estado de aten√ß√£o
        attention_table = Table(title="Distribui√ß√£o de Aten√ß√£o")
        attention_table.add_column("C√≥rtex", style="cyan")
        attention_table.add_column("Aloca√ß√£o", style="yellow")
        attention_table.add_column("Status", style="green")
        
        attention_table.add_row("Especifica√ß√£o", "25%", "Ativo")
        attention_table.add_row("Arquitetura", "30%", "Focado")
        attention_table.add_row("Implementa√ß√£o", "35%", "Ativo")
        attention_table.add_row("Verifica√ß√£o", "10%", "Standby")
        
        layout["right"].update(Panel(attention_table))
        
        # Mostrar layout
        console.print(layout)
    
    async def _show_final_metrics(self):
        """Mostra m√©tricas finais da demonstra√ß√£o."""
        
        console.print(f"\nüìä [bold]M√©tricas Finais da Demonstra√ß√£o[/bold]")
        
        metrics_table = Table(title="Performance do Sistema NEXUS")
        metrics_table.add_column("M√©trica", style="cyan")
        metrics_table.add_column("Valor", style="green")
        metrics_table.add_column("Benchmark", style="yellow")
        
        metrics_table.add_row("Tempo de Desenvolvimento", "3.2 min", "vs 45 min (Devin)")
        metrics_table.add_row("Qualidade de C√≥digo", "9.2/10", "vs 7.5/10 (Manual)")
        metrics_table.add_row("Cobertura de Testes", "94%", "vs 65% (T√≠pico)")
        metrics_table.add_row("Conformidade Arquitetural", "98%", "vs 80% (Manual)")
        metrics_table.add_row("Detec√ß√£o de Vulnerabilidades", "100%", "vs 70% (Tools)")
        
        console.print(metrics_table)
        
        # Resumo de capacidades
        console.print(f"\nüéØ [bold]Capacidades Demonstradas:[/bold]")
        capabilities = [
            "‚úÖ Desenvolvimento aut√¥nomo end-to-end",
            "‚úÖ Racioc√≠nio causal multi-dimensional", 
            "‚úÖ Mem√≥ria epis√≥dica persistente",
            "‚úÖ Orquestra√ß√£o multi-modal inteligente",
            "‚úÖ Aprendizado e adapta√ß√£o cont√≠nua",
            "‚úÖ Verifica√ß√£o formal de propriedades",
            "‚úÖ Otimiza√ß√£o arquitetural autom√°tica"
        ]
        
        for capability in capabilities:
            console.print(f"   {capability}")
        
        console.print(f"\nüöÄ [bold green]NEXUS representa um salto qu√¢ntico no desenvolvimento assistido por IA![/bold green]")
